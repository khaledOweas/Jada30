//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class CoreService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    branchPOST(body: CreateBranchDto | undefined): Observable<GetBranchDtoBaseResponse> {
        let url_ = this.baseUrl + "/Branch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBranchPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBranchPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetBranchDtoBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetBranchDtoBaseResponse>;
        }));
    }

    protected processBranchPOST(response: HttpResponseBase): Observable<GetBranchDtoBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetBranchDtoBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    branchGET(): Observable<GetBranchDtoListBaseResponse> {
        let url_ = this.baseUrl + "/Branch";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBranchGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBranchGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetBranchDtoListBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetBranchDtoListBaseResponse>;
        }));
    }

    protected processBranchGET(response: HttpResponseBase): Observable<GetBranchDtoListBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetBranchDtoListBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    branchGET2(id: number): Observable<GetBranchDtoBaseResponse> {
        let url_ = this.baseUrl + "/Branch/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBranchGET2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBranchGET2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetBranchDtoBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetBranchDtoBaseResponse>;
        }));
    }

    protected processBranchGET2(response: HttpResponseBase): Observable<GetBranchDtoBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetBranchDtoBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    branchPUT(id: number, body: CreateBranchDto | undefined): Observable<GetBranchDtoBaseResponse> {
        let url_ = this.baseUrl + "/Branch/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBranchPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBranchPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetBranchDtoBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetBranchDtoBaseResponse>;
        }));
    }

    protected processBranchPUT(response: HttpResponseBase): Observable<GetBranchDtoBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetBranchDtoBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    branchDELETE(id: number): Observable<BooleanBaseResponse> {
        let url_ = this.baseUrl + "/Branch/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBranchDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBranchDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanBaseResponse>;
        }));
    }

    protected processBranchDELETE(response: HttpResponseBase): Observable<BooleanBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getFacilities(): Observable<FacilityDtoListBaseResponse> {
        let url_ = this.baseUrl + "/Facility/GetFacilities";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFacilities(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFacilities(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FacilityDtoListBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FacilityDtoListBaseResponse>;
        }));
    }

    protected processGetFacilities(response: HttpResponseBase): Observable<FacilityDtoListBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FacilityDtoListBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getFacility(id: number): Observable<FacilityDtoBaseResponse> {
        let url_ = this.baseUrl + "/Facility/GetFacility/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFacility(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFacility(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FacilityDtoBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FacilityDtoBaseResponse>;
        }));
    }

    protected processGetFacility(response: HttpResponseBase): Observable<FacilityDtoBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FacilityDtoBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    createFacility(body: CreateFacilityDto | undefined): Observable<FacilityDtoBaseResponse> {
        let url_ = this.baseUrl + "/Facility/CreateFacility";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateFacility(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateFacility(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FacilityDtoBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FacilityDtoBaseResponse>;
        }));
    }

    protected processCreateFacility(response: HttpResponseBase): Observable<FacilityDtoBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FacilityDtoBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    updateFacility(id: number, body: FacilityDto | undefined): Observable<FacilityDtoBaseResponse> {
        let url_ = this.baseUrl + "/Facility/UpdateFacility/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateFacility(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateFacility(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FacilityDtoBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FacilityDtoBaseResponse>;
        }));
    }

    protected processUpdateFacility(response: HttpResponseBase): Observable<FacilityDtoBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FacilityDtoBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    facility(id: number): Observable<BooleanBaseResponse> {
        let url_ = this.baseUrl + "/Facility/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFacility(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFacility(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanBaseResponse>;
        }));
    }

    protected processFacility(response: HttpResponseBase): Observable<BooleanBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getPackages(): Observable<GetPackageDtoListBaseResponse> {
        let url_ = this.baseUrl + "/Package/GetPackages";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPackages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPackages(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetPackageDtoListBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetPackageDtoListBaseResponse>;
        }));
    }

    protected processGetPackages(response: HttpResponseBase): Observable<GetPackageDtoListBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetPackageDtoListBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    createPackage(body: AddPackageDto | undefined): Observable<StringBaseResponse> {
        let url_ = this.baseUrl + "/Package/CreatePackage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreatePackage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreatePackage(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<StringBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<StringBaseResponse>;
        }));
    }

    protected processCreatePackage(response: HttpResponseBase): Observable<StringBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    updatePackage(id: number, body: AddPackageDto | undefined): Observable<StringBaseResponse> {
        let url_ = this.baseUrl + "/Package/UpdatePackage/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdatePackage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdatePackage(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<StringBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<StringBaseResponse>;
        }));
    }

    protected processUpdatePackage(response: HttpResponseBase): Observable<StringBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    deletePackage(id: number): Observable<StringBaseResponse> {
        let url_ = this.baseUrl + "/Package/DeletePackage/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeletePackage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeletePackage(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<StringBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<StringBaseResponse>;
        }));
    }

    protected processDeletePackage(response: HttpResponseBase): Observable<StringBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getPackage(id: number): Observable<GetPackageDtoBaseResponse> {
        let url_ = this.baseUrl + "/Package/GetPackage/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPackage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPackage(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetPackageDtoBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetPackageDtoBaseResponse>;
        }));
    }

    protected processGetPackage(response: HttpResponseBase): Observable<GetPackageDtoBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetPackageDtoBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    perkPOST(body: CreatePerkDto | undefined): Observable<GetPerkDtoBaseResponse> {
        let url_ = this.baseUrl + "/Perk";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPerkPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPerkPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetPerkDtoBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetPerkDtoBaseResponse>;
        }));
    }

    protected processPerkPOST(response: HttpResponseBase): Observable<GetPerkDtoBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetPerkDtoBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    perkGET(): Observable<GetPerkDtoListBaseResponse> {
        let url_ = this.baseUrl + "/Perk";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPerkGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPerkGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetPerkDtoListBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetPerkDtoListBaseResponse>;
        }));
    }

    protected processPerkGET(response: HttpResponseBase): Observable<GetPerkDtoListBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetPerkDtoListBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    perkGET2(id: number): Observable<GetPerkDtoBaseResponse> {
        let url_ = this.baseUrl + "/Perk/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPerkGET2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPerkGET2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetPerkDtoBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetPerkDtoBaseResponse>;
        }));
    }

    protected processPerkGET2(response: HttpResponseBase): Observable<GetPerkDtoBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetPerkDtoBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    perkPUT(id: number, body: CreatePerkDto | undefined): Observable<GetPerkDtoBaseResponse> {
        let url_ = this.baseUrl + "/Perk/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPerkPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPerkPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetPerkDtoBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetPerkDtoBaseResponse>;
        }));
    }

    protected processPerkPUT(response: HttpResponseBase): Observable<GetPerkDtoBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetPerkDtoBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    perkDELETE(id: number): Observable<BooleanBaseResponse> {
        let url_ = this.baseUrl + "/Perk/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPerkDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPerkDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanBaseResponse>;
        }));
    }

    protected processPerkDELETE(response: HttpResponseBase): Observable<BooleanBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getPriceCategories(): Observable<GetPriceCategoryListBaseResponse> {
        let url_ = this.baseUrl + "/PriceCategory/GetPriceCategories";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPriceCategories(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPriceCategories(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetPriceCategoryListBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetPriceCategoryListBaseResponse>;
        }));
    }

    protected processGetPriceCategories(response: HttpResponseBase): Observable<GetPriceCategoryListBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetPriceCategoryListBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    addPriceCategory(body: AddPriceCategory | undefined): Observable<GetPriceCategoryBaseResponse> {
        let url_ = this.baseUrl + "/PriceCategory/AddPriceCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddPriceCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddPriceCategory(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetPriceCategoryBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetPriceCategoryBaseResponse>;
        }));
    }

    protected processAddPriceCategory(response: HttpResponseBase): Observable<GetPriceCategoryBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetPriceCategoryBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    updatePriceCategory(id: number, body: AddPriceCategory | undefined): Observable<GetPriceCategoryBaseResponse> {
        let url_ = this.baseUrl + "/PriceCategory/UpdatePriceCategory/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdatePriceCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdatePriceCategory(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetPriceCategoryBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetPriceCategoryBaseResponse>;
        }));
    }

    protected processUpdatePriceCategory(response: HttpResponseBase): Observable<GetPriceCategoryBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetPriceCategoryBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    deletePriceCategory(id: number): Observable<BooleanBaseResponse> {
        let url_ = this.baseUrl + "/PriceCategory/DeletePriceCategory/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeletePriceCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeletePriceCategory(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanBaseResponse>;
        }));
    }

    protected processDeletePriceCategory(response: HttpResponseBase): Observable<BooleanBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getPriceCategory(id: number): Observable<GetPriceCategoryBaseResponse> {
        let url_ = this.baseUrl + "/PriceCategory/GetPriceCategory/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPriceCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPriceCategory(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetPriceCategoryBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetPriceCategoryBaseResponse>;
        }));
    }

    protected processGetPriceCategory(response: HttpResponseBase): Observable<GetPriceCategoryBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetPriceCategoryBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    toggelPublish(id: number): Observable<StringBaseResponse> {
        let url_ = this.baseUrl + "/PriceCategory/ToggelPublish/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processToggelPublish(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processToggelPublish(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<StringBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<StringBaseResponse>;
        }));
    }

    protected processToggelPublish(response: HttpResponseBase): Observable<StringBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getFacilities2(): Observable<SupportingServiceProviderDtoListBaseResponse> {
        let url_ = this.baseUrl + "/SupportingServiceProvider/GetFacilities";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFacilities2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFacilities2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SupportingServiceProviderDtoListBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SupportingServiceProviderDtoListBaseResponse>;
        }));
    }

    protected processGetFacilities2(response: HttpResponseBase): Observable<SupportingServiceProviderDtoListBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SupportingServiceProviderDtoListBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getSupportingServiceProvider(id: number): Observable<SupportingServiceProviderDtoBaseResponse> {
        let url_ = this.baseUrl + "/SupportingServiceProvider/GetSupportingServiceProvider/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSupportingServiceProvider(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSupportingServiceProvider(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SupportingServiceProviderDtoBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SupportingServiceProviderDtoBaseResponse>;
        }));
    }

    protected processGetSupportingServiceProvider(response: HttpResponseBase): Observable<SupportingServiceProviderDtoBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SupportingServiceProviderDtoBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    createSupportingServiceProvider(body: CreateSupportingServiceProviderDto | undefined): Observable<SupportingServiceProviderDtoBaseResponse> {
        let url_ = this.baseUrl + "/SupportingServiceProvider/CreateSupportingServiceProvider";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateSupportingServiceProvider(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateSupportingServiceProvider(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SupportingServiceProviderDtoBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SupportingServiceProviderDtoBaseResponse>;
        }));
    }

    protected processCreateSupportingServiceProvider(response: HttpResponseBase): Observable<SupportingServiceProviderDtoBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SupportingServiceProviderDtoBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    updateSupportingServiceProvider(id: number, body: CreateSupportingServiceProviderDto | undefined): Observable<SupportingServiceProviderDtoBaseResponse> {
        let url_ = this.baseUrl + "/SupportingServiceProvider/UpdateSupportingServiceProvider/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateSupportingServiceProvider(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateSupportingServiceProvider(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SupportingServiceProviderDtoBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SupportingServiceProviderDtoBaseResponse>;
        }));
    }

    protected processUpdateSupportingServiceProvider(response: HttpResponseBase): Observable<SupportingServiceProviderDtoBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SupportingServiceProviderDtoBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    supportingServiceProvider(id: number): Observable<BooleanBaseResponse> {
        let url_ = this.baseUrl + "/SupportingServiceProvider/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSupportingServiceProvider(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSupportingServiceProvider(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanBaseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanBaseResponse>;
        }));
    }

    protected processSupportingServiceProvider(response: HttpResponseBase): Observable<BooleanBaseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanBaseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getWeatherForecast(): Observable<WeatherForecast[]> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWeatherForecast(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWeatherForecast(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WeatherForecast[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WeatherForecast[]>;
        }));
    }

    protected processGetWeatherForecast(response: HttpResponseBase): Observable<WeatherForecast[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class AddPackageDto implements IAddPackageDto {
    name?: string | undefined;
    nameAr?: string | undefined;
    descriptionAr?: string | undefined;
    description?: string | undefined;
    defaultDiscount?: number;
    writtenServices?: string | undefined;
    maxBranchUsers?: number;
    maxMogdiPlatformUsage?: number;
    packageFacilities?: AddPackageFacilityDto[] | undefined;

    constructor(data?: IAddPackageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.nameAr = _data["nameAr"];
            this.descriptionAr = _data["descriptionAr"];
            this.description = _data["description"];
            this.defaultDiscount = _data["defaultDiscount"];
            this.writtenServices = _data["writtenServices"];
            this.maxBranchUsers = _data["maxBranchUsers"];
            this.maxMogdiPlatformUsage = _data["maxMogdiPlatformUsage"];
            if (Array.isArray(_data["packageFacilities"])) {
                this.packageFacilities = [] as any;
                for (let item of _data["packageFacilities"])
                    this.packageFacilities!.push(AddPackageFacilityDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AddPackageDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddPackageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["nameAr"] = this.nameAr;
        data["descriptionAr"] = this.descriptionAr;
        data["description"] = this.description;
        data["defaultDiscount"] = this.defaultDiscount;
        data["writtenServices"] = this.writtenServices;
        data["maxBranchUsers"] = this.maxBranchUsers;
        data["maxMogdiPlatformUsage"] = this.maxMogdiPlatformUsage;
        if (Array.isArray(this.packageFacilities)) {
            data["packageFacilities"] = [];
            for (let item of this.packageFacilities)
                data["packageFacilities"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAddPackageDto {
    name?: string | undefined;
    nameAr?: string | undefined;
    descriptionAr?: string | undefined;
    description?: string | undefined;
    defaultDiscount?: number;
    writtenServices?: string | undefined;
    maxBranchUsers?: number;
    maxMogdiPlatformUsage?: number;
    packageFacilities?: AddPackageFacilityDto[] | undefined;
}

export class AddPackageFacilityDto implements IAddPackageFacilityDto {
    packageId?: number;
    facilityId?: number;
    typeId?: number;
    quantity?: number;
    percentageDicount?: number;
    price?: number;
    isTaxIncluded?: boolean;

    constructor(data?: IAddPackageFacilityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.packageId = _data["packageId"];
            this.facilityId = _data["facilityId"];
            this.typeId = _data["typeId"];
            this.quantity = _data["quantity"];
            this.percentageDicount = _data["percentageDicount"];
            this.price = _data["price"];
            this.isTaxIncluded = _data["isTaxIncluded"];
        }
    }

    static fromJS(data: any): AddPackageFacilityDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddPackageFacilityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["packageId"] = this.packageId;
        data["facilityId"] = this.facilityId;
        data["typeId"] = this.typeId;
        data["quantity"] = this.quantity;
        data["percentageDicount"] = this.percentageDicount;
        data["price"] = this.price;
        data["isTaxIncluded"] = this.isTaxIncluded;
        return data;
    }
}

export interface IAddPackageFacilityDto {
    packageId?: number;
    facilityId?: number;
    typeId?: number;
    quantity?: number;
    percentageDicount?: number;
    price?: number;
    isTaxIncluded?: boolean;
}

export class AddPriceCategory implements IAddPriceCategory {
    name?: string | undefined;
    nameAr?: string | undefined;
    description?: string | undefined;
    descriptionAr?: string | undefined;
    isPublish?: boolean;
    price?: number;
    categoryAdministrativeRegionIds?: number[] | undefined;

    constructor(data?: IAddPriceCategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.nameAr = _data["nameAr"];
            this.description = _data["description"];
            this.descriptionAr = _data["descriptionAr"];
            this.isPublish = _data["isPublish"];
            this.price = _data["price"];
            if (Array.isArray(_data["categoryAdministrativeRegionIds"])) {
                this.categoryAdministrativeRegionIds = [] as any;
                for (let item of _data["categoryAdministrativeRegionIds"])
                    this.categoryAdministrativeRegionIds!.push(item);
            }
        }
    }

    static fromJS(data: any): AddPriceCategory {
        data = typeof data === 'object' ? data : {};
        let result = new AddPriceCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["nameAr"] = this.nameAr;
        data["description"] = this.description;
        data["descriptionAr"] = this.descriptionAr;
        data["isPublish"] = this.isPublish;
        data["price"] = this.price;
        if (Array.isArray(this.categoryAdministrativeRegionIds)) {
            data["categoryAdministrativeRegionIds"] = [];
            for (let item of this.categoryAdministrativeRegionIds)
                data["categoryAdministrativeRegionIds"].push(item);
        }
        return data;
    }
}

export interface IAddPriceCategory {
    name?: string | undefined;
    nameAr?: string | undefined;
    description?: string | undefined;
    descriptionAr?: string | undefined;
    isPublish?: boolean;
    price?: number;
    categoryAdministrativeRegionIds?: number[] | undefined;
}

export class BooleanBaseResponse implements IBooleanBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: boolean;
    errors?: Errors[] | undefined;
    statusCode?: number;

    constructor(data?: IBooleanBaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.version = _data["version"];
            this.message = _data["message"];
            this.responseData = _data["responseData"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Errors.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): BooleanBaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BooleanBaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["version"] = this.version;
        data["message"] = this.message;
        data["responseData"] = this.responseData;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface IBooleanBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: boolean;
    errors?: Errors[] | undefined;
    statusCode?: number;
}

export class CreateBranchComponentDto implements ICreateBranchComponentDto {
    branchId?: number;
    componentId?: number;

    constructor(data?: ICreateBranchComponentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.branchId = _data["branchId"];
            this.componentId = _data["componentId"];
        }
    }

    static fromJS(data: any): CreateBranchComponentDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBranchComponentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["componentId"] = this.componentId;
        return data;
    }
}

export interface ICreateBranchComponentDto {
    branchId?: number;
    componentId?: number;
}

export class CreateBranchDto implements ICreateBranchDto {
    name?: string | undefined;
    nameAr?: string | undefined;
    administrativeRegionId?: number;
    websiteBranchId?: number;
    workingDays?: string | undefined;
    startTime?: Date;
    endTime?: Date;
    categoryBranchId?: number;
    branchComponents?: CreateBranchComponentDto[] | undefined;

    constructor(data?: ICreateBranchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.nameAr = _data["nameAr"];
            this.administrativeRegionId = _data["administrativeRegionId"];
            this.websiteBranchId = _data["websiteBranchId"];
            this.workingDays = _data["workingDays"];
            this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : <any>undefined;
            this.endTime = _data["endTime"] ? new Date(_data["endTime"].toString()) : <any>undefined;
            this.categoryBranchId = _data["categoryBranchId"];
            if (Array.isArray(_data["branchComponents"])) {
                this.branchComponents = [] as any;
                for (let item of _data["branchComponents"])
                    this.branchComponents!.push(CreateBranchComponentDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateBranchDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBranchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["nameAr"] = this.nameAr;
        data["administrativeRegionId"] = this.administrativeRegionId;
        data["websiteBranchId"] = this.websiteBranchId;
        data["workingDays"] = this.workingDays;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["categoryBranchId"] = this.categoryBranchId;
        if (Array.isArray(this.branchComponents)) {
            data["branchComponents"] = [];
            for (let item of this.branchComponents)
                data["branchComponents"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICreateBranchDto {
    name?: string | undefined;
    nameAr?: string | undefined;
    administrativeRegionId?: number;
    websiteBranchId?: number;
    workingDays?: string | undefined;
    startTime?: Date;
    endTime?: Date;
    categoryBranchId?: number;
    branchComponents?: CreateBranchComponentDto[] | undefined;
}

export class CreateFacilityDto implements ICreateFacilityDto {
    name?: string | undefined;
    nameAr?: string | undefined;
    categoryId?: number | undefined;
    typeId?: number | undefined;
    destinationId?: number | undefined;
    pricingUnitId?: number | undefined;
    subscriptionId?: number | undefined;
    basePrice?: number;
    isTaxIncluded?: boolean;
    basicContract?: number;
    isPublish?: boolean;

    constructor(data?: ICreateFacilityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.nameAr = _data["nameAr"];
            this.categoryId = _data["categoryId"];
            this.typeId = _data["typeId"];
            this.destinationId = _data["destinationId"];
            this.pricingUnitId = _data["pricingUnitId"];
            this.subscriptionId = _data["subscriptionId"];
            this.basePrice = _data["basePrice"];
            this.isTaxIncluded = _data["isTaxIncluded"];
            this.basicContract = _data["basicContract"];
            this.isPublish = _data["isPublish"];
        }
    }

    static fromJS(data: any): CreateFacilityDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateFacilityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["nameAr"] = this.nameAr;
        data["categoryId"] = this.categoryId;
        data["typeId"] = this.typeId;
        data["destinationId"] = this.destinationId;
        data["pricingUnitId"] = this.pricingUnitId;
        data["subscriptionId"] = this.subscriptionId;
        data["basePrice"] = this.basePrice;
        data["isTaxIncluded"] = this.isTaxIncluded;
        data["basicContract"] = this.basicContract;
        data["isPublish"] = this.isPublish;
        return data;
    }
}

export interface ICreateFacilityDto {
    name?: string | undefined;
    nameAr?: string | undefined;
    categoryId?: number | undefined;
    typeId?: number | undefined;
    destinationId?: number | undefined;
    pricingUnitId?: number | undefined;
    subscriptionId?: number | undefined;
    basePrice?: number;
    isTaxIncluded?: boolean;
    basicContract?: number;
    isPublish?: boolean;
}

export class CreatePerkDto implements ICreatePerkDto {
    name?: string | undefined;
    link?: string | undefined;
    price?: number;
    isTaxIncluded?: boolean;
    availableQuantity?: number;
    isForJadah30Customers?: boolean;
    isActive?: boolean;
    perkLicenses?: CreatePerkLicenseDto[] | undefined;

    constructor(data?: ICreatePerkDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.link = _data["link"];
            this.price = _data["price"];
            this.isTaxIncluded = _data["isTaxIncluded"];
            this.availableQuantity = _data["availableQuantity"];
            this.isForJadah30Customers = _data["isForJadah30Customers"];
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["perkLicenses"])) {
                this.perkLicenses = [] as any;
                for (let item of _data["perkLicenses"])
                    this.perkLicenses!.push(CreatePerkLicenseDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreatePerkDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePerkDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["link"] = this.link;
        data["price"] = this.price;
        data["isTaxIncluded"] = this.isTaxIncluded;
        data["availableQuantity"] = this.availableQuantity;
        data["isForJadah30Customers"] = this.isForJadah30Customers;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.perkLicenses)) {
            data["perkLicenses"] = [];
            for (let item of this.perkLicenses)
                data["perkLicenses"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICreatePerkDto {
    name?: string | undefined;
    link?: string | undefined;
    price?: number;
    isTaxIncluded?: boolean;
    availableQuantity?: number;
    isForJadah30Customers?: boolean;
    isActive?: boolean;
    perkLicenses?: CreatePerkLicenseDto[] | undefined;
}

export class CreatePerkLicenseDto implements ICreatePerkLicenseDto {
    perkId?: number;
    licenseId?: number;

    constructor(data?: ICreatePerkLicenseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.perkId = _data["perkId"];
            this.licenseId = _data["licenseId"];
        }
    }

    static fromJS(data: any): CreatePerkLicenseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePerkLicenseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["perkId"] = this.perkId;
        data["licenseId"] = this.licenseId;
        return data;
    }
}

export interface ICreatePerkLicenseDto {
    perkId?: number;
    licenseId?: number;
}

export class CreateSupportingServiceProviderDto implements ICreateSupportingServiceProviderDto {
    name?: string | undefined;
    taxNumber?: string | undefined;
    specializationId?: number | undefined;
    nationalityId?: number | undefined;
    address?: string | undefined;
    websiteURL?: string | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    isJadah30Restricted?: boolean;
    isActive?: boolean;

    constructor(data?: ICreateSupportingServiceProviderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.taxNumber = _data["taxNumber"];
            this.specializationId = _data["specializationId"];
            this.nationalityId = _data["nationalityId"];
            this.address = _data["address"];
            this.websiteURL = _data["websiteURL"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.isJadah30Restricted = _data["isJadah30Restricted"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): CreateSupportingServiceProviderDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSupportingServiceProviderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["taxNumber"] = this.taxNumber;
        data["specializationId"] = this.specializationId;
        data["nationalityId"] = this.nationalityId;
        data["address"] = this.address;
        data["websiteURL"] = this.websiteURL;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["isJadah30Restricted"] = this.isJadah30Restricted;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface ICreateSupportingServiceProviderDto {
    name?: string | undefined;
    taxNumber?: string | undefined;
    specializationId?: number | undefined;
    nationalityId?: number | undefined;
    address?: string | undefined;
    websiteURL?: string | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    isJadah30Restricted?: boolean;
    isActive?: boolean;
}

export class Errors implements IErrors {
    key?: number;
    value?: string | undefined;

    constructor(data?: IErrors) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): Errors {
        data = typeof data === 'object' ? data : {};
        let result = new Errors();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["value"] = this.value;
        return data;
    }
}

export interface IErrors {
    key?: number;
    value?: string | undefined;
}

export class FacilityDto implements IFacilityDto {
    id?: number;
    name?: string | undefined;
    nameAr?: string | undefined;
    categoryId?: number | undefined;
    typeId?: number | undefined;
    destinationId?: number | undefined;
    pricingUnitId?: number | undefined;
    subscriptionId?: number | undefined;
    categoryName?: string | undefined;
    categoryNameAr?: string | undefined;
    typeName?: string | undefined;
    typeNameAr?: string | undefined;
    destinationName?: string | undefined;
    destinationNameAr?: string | undefined;
    pricingUnitName?: string | undefined;
    pricingUnitNameAr?: string | undefined;
    subscriptionName?: string | undefined;
    subscriptionNameAr?: string | undefined;
    basePrice?: number;
    isTaxIncluded?: boolean;
    basicContract?: number;
    isPublish?: boolean;

    constructor(data?: IFacilityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.nameAr = _data["nameAr"];
            this.categoryId = _data["categoryId"];
            this.typeId = _data["typeId"];
            this.destinationId = _data["destinationId"];
            this.pricingUnitId = _data["pricingUnitId"];
            this.subscriptionId = _data["subscriptionId"];
            this.categoryName = _data["categoryName"];
            this.categoryNameAr = _data["categoryNameAr"];
            this.typeName = _data["typeName"];
            this.typeNameAr = _data["typeNameAr"];
            this.destinationName = _data["destinationName"];
            this.destinationNameAr = _data["destinationNameAr"];
            this.pricingUnitName = _data["pricingUnitName"];
            this.pricingUnitNameAr = _data["pricingUnitNameAr"];
            this.subscriptionName = _data["subscriptionName"];
            this.subscriptionNameAr = _data["subscriptionNameAr"];
            this.basePrice = _data["basePrice"];
            this.isTaxIncluded = _data["isTaxIncluded"];
            this.basicContract = _data["basicContract"];
            this.isPublish = _data["isPublish"];
        }
    }

    static fromJS(data: any): FacilityDto {
        data = typeof data === 'object' ? data : {};
        let result = new FacilityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["nameAr"] = this.nameAr;
        data["categoryId"] = this.categoryId;
        data["typeId"] = this.typeId;
        data["destinationId"] = this.destinationId;
        data["pricingUnitId"] = this.pricingUnitId;
        data["subscriptionId"] = this.subscriptionId;
        data["categoryName"] = this.categoryName;
        data["categoryNameAr"] = this.categoryNameAr;
        data["typeName"] = this.typeName;
        data["typeNameAr"] = this.typeNameAr;
        data["destinationName"] = this.destinationName;
        data["destinationNameAr"] = this.destinationNameAr;
        data["pricingUnitName"] = this.pricingUnitName;
        data["pricingUnitNameAr"] = this.pricingUnitNameAr;
        data["subscriptionName"] = this.subscriptionName;
        data["subscriptionNameAr"] = this.subscriptionNameAr;
        data["basePrice"] = this.basePrice;
        data["isTaxIncluded"] = this.isTaxIncluded;
        data["basicContract"] = this.basicContract;
        data["isPublish"] = this.isPublish;
        return data;
    }
}

export interface IFacilityDto {
    id?: number;
    name?: string | undefined;
    nameAr?: string | undefined;
    categoryId?: number | undefined;
    typeId?: number | undefined;
    destinationId?: number | undefined;
    pricingUnitId?: number | undefined;
    subscriptionId?: number | undefined;
    categoryName?: string | undefined;
    categoryNameAr?: string | undefined;
    typeName?: string | undefined;
    typeNameAr?: string | undefined;
    destinationName?: string | undefined;
    destinationNameAr?: string | undefined;
    pricingUnitName?: string | undefined;
    pricingUnitNameAr?: string | undefined;
    subscriptionName?: string | undefined;
    subscriptionNameAr?: string | undefined;
    basePrice?: number;
    isTaxIncluded?: boolean;
    basicContract?: number;
    isPublish?: boolean;
}

export class FacilityDtoBaseResponse implements IFacilityDtoBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: FacilityDto;
    errors?: Errors[] | undefined;
    statusCode?: number;

    constructor(data?: IFacilityDtoBaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.version = _data["version"];
            this.message = _data["message"];
            this.responseData = _data["responseData"] ? FacilityDto.fromJS(_data["responseData"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Errors.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): FacilityDtoBaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new FacilityDtoBaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["version"] = this.version;
        data["message"] = this.message;
        data["responseData"] = this.responseData ? this.responseData.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface IFacilityDtoBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: FacilityDto;
    errors?: Errors[] | undefined;
    statusCode?: number;
}

export class FacilityDtoListBaseResponse implements IFacilityDtoListBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: FacilityDto[] | undefined;
    errors?: Errors[] | undefined;
    statusCode?: number;

    constructor(data?: IFacilityDtoListBaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.version = _data["version"];
            this.message = _data["message"];
            if (Array.isArray(_data["responseData"])) {
                this.responseData = [] as any;
                for (let item of _data["responseData"])
                    this.responseData!.push(FacilityDto.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Errors.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): FacilityDtoListBaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new FacilityDtoListBaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["version"] = this.version;
        data["message"] = this.message;
        if (Array.isArray(this.responseData)) {
            data["responseData"] = [];
            for (let item of this.responseData)
                data["responseData"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface IFacilityDtoListBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: FacilityDto[] | undefined;
    errors?: Errors[] | undefined;
    statusCode?: number;
}

export class GetBranchComponentDto implements IGetBranchComponentDto {
    id?: number;
    branchName?: string | undefined;
    branchNameAr?: string | undefined;
    componentName?: string | undefined;
    componentNameAr?: string | undefined;

    constructor(data?: IGetBranchComponentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.branchName = _data["branchName"];
            this.branchNameAr = _data["branchNameAr"];
            this.componentName = _data["componentName"];
            this.componentNameAr = _data["componentNameAr"];
        }
    }

    static fromJS(data: any): GetBranchComponentDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetBranchComponentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["branchName"] = this.branchName;
        data["branchNameAr"] = this.branchNameAr;
        data["componentName"] = this.componentName;
        data["componentNameAr"] = this.componentNameAr;
        return data;
    }
}

export interface IGetBranchComponentDto {
    id?: number;
    branchName?: string | undefined;
    branchNameAr?: string | undefined;
    componentName?: string | undefined;
    componentNameAr?: string | undefined;
}

export class GetBranchDto implements IGetBranchDto {
    id?: number;
    name?: string | undefined;
    nameAr?: string | undefined;
    administrativeRegion?: string | undefined;
    administrativeRegionAr?: string | undefined;
    websiteBranch?: string | undefined;
    websiteBranchAr?: string | undefined;
    workingDays?: string | undefined;
    startTime?: Date;
    endTime?: Date;
    categoryBranch?: string | undefined;
    categoryBranchAr?: string | undefined;
    administrativeRegionId?: number;
    websiteBranchId?: number;
    categoryBranchId?: number;
    branchComponents?: GetBranchComponentDto[] | undefined;

    constructor(data?: IGetBranchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.nameAr = _data["nameAr"];
            this.administrativeRegion = _data["administrativeRegion"];
            this.administrativeRegionAr = _data["administrativeRegionAr"];
            this.websiteBranch = _data["websiteBranch"];
            this.websiteBranchAr = _data["websiteBranchAr"];
            this.workingDays = _data["workingDays"];
            this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : <any>undefined;
            this.endTime = _data["endTime"] ? new Date(_data["endTime"].toString()) : <any>undefined;
            this.categoryBranch = _data["categoryBranch"];
            this.categoryBranchAr = _data["categoryBranchAr"];
            this.administrativeRegionId = _data["administrativeRegionId"];
            this.websiteBranchId = _data["websiteBranchId"];
            this.categoryBranchId = _data["categoryBranchId"];
            if (Array.isArray(_data["branchComponents"])) {
                this.branchComponents = [] as any;
                for (let item of _data["branchComponents"])
                    this.branchComponents!.push(GetBranchComponentDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetBranchDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetBranchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["nameAr"] = this.nameAr;
        data["administrativeRegion"] = this.administrativeRegion;
        data["administrativeRegionAr"] = this.administrativeRegionAr;
        data["websiteBranch"] = this.websiteBranch;
        data["websiteBranchAr"] = this.websiteBranchAr;
        data["workingDays"] = this.workingDays;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["categoryBranch"] = this.categoryBranch;
        data["categoryBranchAr"] = this.categoryBranchAr;
        data["administrativeRegionId"] = this.administrativeRegionId;
        data["websiteBranchId"] = this.websiteBranchId;
        data["categoryBranchId"] = this.categoryBranchId;
        if (Array.isArray(this.branchComponents)) {
            data["branchComponents"] = [];
            for (let item of this.branchComponents)
                data["branchComponents"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetBranchDto {
    id?: number;
    name?: string | undefined;
    nameAr?: string | undefined;
    administrativeRegion?: string | undefined;
    administrativeRegionAr?: string | undefined;
    websiteBranch?: string | undefined;
    websiteBranchAr?: string | undefined;
    workingDays?: string | undefined;
    startTime?: Date;
    endTime?: Date;
    categoryBranch?: string | undefined;
    categoryBranchAr?: string | undefined;
    administrativeRegionId?: number;
    websiteBranchId?: number;
    categoryBranchId?: number;
    branchComponents?: GetBranchComponentDto[] | undefined;
}

export class GetBranchDtoBaseResponse implements IGetBranchDtoBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: GetBranchDto;
    errors?: Errors[] | undefined;
    statusCode?: number;

    constructor(data?: IGetBranchDtoBaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.version = _data["version"];
            this.message = _data["message"];
            this.responseData = _data["responseData"] ? GetBranchDto.fromJS(_data["responseData"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Errors.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): GetBranchDtoBaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetBranchDtoBaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["version"] = this.version;
        data["message"] = this.message;
        data["responseData"] = this.responseData ? this.responseData.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface IGetBranchDtoBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: GetBranchDto;
    errors?: Errors[] | undefined;
    statusCode?: number;
}

export class GetBranchDtoListBaseResponse implements IGetBranchDtoListBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: GetBranchDto[] | undefined;
    errors?: Errors[] | undefined;
    statusCode?: number;

    constructor(data?: IGetBranchDtoListBaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.version = _data["version"];
            this.message = _data["message"];
            if (Array.isArray(_data["responseData"])) {
                this.responseData = [] as any;
                for (let item of _data["responseData"])
                    this.responseData!.push(GetBranchDto.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Errors.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): GetBranchDtoListBaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetBranchDtoListBaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["version"] = this.version;
        data["message"] = this.message;
        if (Array.isArray(this.responseData)) {
            data["responseData"] = [];
            for (let item of this.responseData)
                data["responseData"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface IGetBranchDtoListBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: GetBranchDto[] | undefined;
    errors?: Errors[] | undefined;
    statusCode?: number;
}

export class GetCategoryAdministrativeRegionDto implements IGetCategoryAdministrativeRegionDto {
    id?: number;
    administrativeRegionId?: number | undefined;
    administrativeRegionName?: string | undefined;
    administrativeRegionNameAr?: string | undefined;
    pricingCategoryId?: number | undefined;
    pricingCategoryName?: string | undefined;
    pricingCategoryNameAr?: string | undefined;
    isPublish?: boolean | undefined;

    constructor(data?: IGetCategoryAdministrativeRegionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.administrativeRegionId = _data["administrativeRegionId"];
            this.administrativeRegionName = _data["administrativeRegionName"];
            this.administrativeRegionNameAr = _data["administrativeRegionNameAr"];
            this.pricingCategoryId = _data["pricingCategoryId"];
            this.pricingCategoryName = _data["pricingCategoryName"];
            this.pricingCategoryNameAr = _data["pricingCategoryNameAr"];
            this.isPublish = _data["isPublish"];
        }
    }

    static fromJS(data: any): GetCategoryAdministrativeRegionDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetCategoryAdministrativeRegionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["administrativeRegionId"] = this.administrativeRegionId;
        data["administrativeRegionName"] = this.administrativeRegionName;
        data["administrativeRegionNameAr"] = this.administrativeRegionNameAr;
        data["pricingCategoryId"] = this.pricingCategoryId;
        data["pricingCategoryName"] = this.pricingCategoryName;
        data["pricingCategoryNameAr"] = this.pricingCategoryNameAr;
        data["isPublish"] = this.isPublish;
        return data;
    }
}

export interface IGetCategoryAdministrativeRegionDto {
    id?: number;
    administrativeRegionId?: number | undefined;
    administrativeRegionName?: string | undefined;
    administrativeRegionNameAr?: string | undefined;
    pricingCategoryId?: number | undefined;
    pricingCategoryName?: string | undefined;
    pricingCategoryNameAr?: string | undefined;
    isPublish?: boolean | undefined;
}

export class GetPackageDto implements IGetPackageDto {
    id?: number;
    name?: string | undefined;
    nameAr?: string | undefined;
    descriptionAr?: string | undefined;
    description?: string | undefined;
    defaultDiscount?: number;
    writtenServices?: string | undefined;
    maxBranchUsers?: number;
    maxMogdiPlatformUsage?: number;
    packageFacilities?: GetPackageFacilityDto[] | undefined;

    constructor(data?: IGetPackageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.nameAr = _data["nameAr"];
            this.descriptionAr = _data["descriptionAr"];
            this.description = _data["description"];
            this.defaultDiscount = _data["defaultDiscount"];
            this.writtenServices = _data["writtenServices"];
            this.maxBranchUsers = _data["maxBranchUsers"];
            this.maxMogdiPlatformUsage = _data["maxMogdiPlatformUsage"];
            if (Array.isArray(_data["packageFacilities"])) {
                this.packageFacilities = [] as any;
                for (let item of _data["packageFacilities"])
                    this.packageFacilities!.push(GetPackageFacilityDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetPackageDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetPackageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["nameAr"] = this.nameAr;
        data["descriptionAr"] = this.descriptionAr;
        data["description"] = this.description;
        data["defaultDiscount"] = this.defaultDiscount;
        data["writtenServices"] = this.writtenServices;
        data["maxBranchUsers"] = this.maxBranchUsers;
        data["maxMogdiPlatformUsage"] = this.maxMogdiPlatformUsage;
        if (Array.isArray(this.packageFacilities)) {
            data["packageFacilities"] = [];
            for (let item of this.packageFacilities)
                data["packageFacilities"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetPackageDto {
    id?: number;
    name?: string | undefined;
    nameAr?: string | undefined;
    descriptionAr?: string | undefined;
    description?: string | undefined;
    defaultDiscount?: number;
    writtenServices?: string | undefined;
    maxBranchUsers?: number;
    maxMogdiPlatformUsage?: number;
    packageFacilities?: GetPackageFacilityDto[] | undefined;
}

export class GetPackageDtoBaseResponse implements IGetPackageDtoBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: GetPackageDto;
    errors?: Errors[] | undefined;
    statusCode?: number;

    constructor(data?: IGetPackageDtoBaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.version = _data["version"];
            this.message = _data["message"];
            this.responseData = _data["responseData"] ? GetPackageDto.fromJS(_data["responseData"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Errors.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): GetPackageDtoBaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetPackageDtoBaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["version"] = this.version;
        data["message"] = this.message;
        data["responseData"] = this.responseData ? this.responseData.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface IGetPackageDtoBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: GetPackageDto;
    errors?: Errors[] | undefined;
    statusCode?: number;
}

export class GetPackageDtoListBaseResponse implements IGetPackageDtoListBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: GetPackageDto[] | undefined;
    errors?: Errors[] | undefined;
    statusCode?: number;

    constructor(data?: IGetPackageDtoListBaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.version = _data["version"];
            this.message = _data["message"];
            if (Array.isArray(_data["responseData"])) {
                this.responseData = [] as any;
                for (let item of _data["responseData"])
                    this.responseData!.push(GetPackageDto.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Errors.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): GetPackageDtoListBaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetPackageDtoListBaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["version"] = this.version;
        data["message"] = this.message;
        if (Array.isArray(this.responseData)) {
            data["responseData"] = [];
            for (let item of this.responseData)
                data["responseData"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface IGetPackageDtoListBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: GetPackageDto[] | undefined;
    errors?: Errors[] | undefined;
    statusCode?: number;
}

export class GetPackageFacilityDto implements IGetPackageFacilityDto {
    id?: number;
    packageId?: number;
    packageName?: string | undefined;
    packageNameAr?: string | undefined;
    facilityId?: number;
    facilityName?: string | undefined;
    facilityNameAr?: string | undefined;
    typeId?: number;
    typeName?: string | undefined;
    typeNameAr?: string | undefined;
    quantity?: number;
    percentageDicount?: number;
    price?: number;
    isTaxIncluded?: boolean;

    constructor(data?: IGetPackageFacilityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.packageId = _data["packageId"];
            this.packageName = _data["packageName"];
            this.packageNameAr = _data["packageNameAr"];
            this.facilityId = _data["facilityId"];
            this.facilityName = _data["facilityName"];
            this.facilityNameAr = _data["facilityNameAr"];
            this.typeId = _data["typeId"];
            this.typeName = _data["typeName"];
            this.typeNameAr = _data["typeNameAr"];
            this.quantity = _data["quantity"];
            this.percentageDicount = _data["percentageDicount"];
            this.price = _data["price"];
            this.isTaxIncluded = _data["isTaxIncluded"];
        }
    }

    static fromJS(data: any): GetPackageFacilityDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetPackageFacilityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["packageId"] = this.packageId;
        data["packageName"] = this.packageName;
        data["packageNameAr"] = this.packageNameAr;
        data["facilityId"] = this.facilityId;
        data["facilityName"] = this.facilityName;
        data["facilityNameAr"] = this.facilityNameAr;
        data["typeId"] = this.typeId;
        data["typeName"] = this.typeName;
        data["typeNameAr"] = this.typeNameAr;
        data["quantity"] = this.quantity;
        data["percentageDicount"] = this.percentageDicount;
        data["price"] = this.price;
        data["isTaxIncluded"] = this.isTaxIncluded;
        return data;
    }
}

export interface IGetPackageFacilityDto {
    id?: number;
    packageId?: number;
    packageName?: string | undefined;
    packageNameAr?: string | undefined;
    facilityId?: number;
    facilityName?: string | undefined;
    facilityNameAr?: string | undefined;
    typeId?: number;
    typeName?: string | undefined;
    typeNameAr?: string | undefined;
    quantity?: number;
    percentageDicount?: number;
    price?: number;
    isTaxIncluded?: boolean;
}

export class GetPerkDto implements IGetPerkDto {
    id?: number;
    name?: string | undefined;
    link?: string | undefined;
    price?: number;
    isTaxIncluded?: boolean;
    availableQuantity?: number;
    isForJadah30Customers?: boolean;
    isActive?: boolean;
    perkLicenses?: GetPerkLicenseDto[] | undefined;

    constructor(data?: IGetPerkDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.link = _data["link"];
            this.price = _data["price"];
            this.isTaxIncluded = _data["isTaxIncluded"];
            this.availableQuantity = _data["availableQuantity"];
            this.isForJadah30Customers = _data["isForJadah30Customers"];
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["perkLicenses"])) {
                this.perkLicenses = [] as any;
                for (let item of _data["perkLicenses"])
                    this.perkLicenses!.push(GetPerkLicenseDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetPerkDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetPerkDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["link"] = this.link;
        data["price"] = this.price;
        data["isTaxIncluded"] = this.isTaxIncluded;
        data["availableQuantity"] = this.availableQuantity;
        data["isForJadah30Customers"] = this.isForJadah30Customers;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.perkLicenses)) {
            data["perkLicenses"] = [];
            for (let item of this.perkLicenses)
                data["perkLicenses"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetPerkDto {
    id?: number;
    name?: string | undefined;
    link?: string | undefined;
    price?: number;
    isTaxIncluded?: boolean;
    availableQuantity?: number;
    isForJadah30Customers?: boolean;
    isActive?: boolean;
    perkLicenses?: GetPerkLicenseDto[] | undefined;
}

export class GetPerkDtoBaseResponse implements IGetPerkDtoBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: GetPerkDto;
    errors?: Errors[] | undefined;
    statusCode?: number;

    constructor(data?: IGetPerkDtoBaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.version = _data["version"];
            this.message = _data["message"];
            this.responseData = _data["responseData"] ? GetPerkDto.fromJS(_data["responseData"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Errors.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): GetPerkDtoBaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetPerkDtoBaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["version"] = this.version;
        data["message"] = this.message;
        data["responseData"] = this.responseData ? this.responseData.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface IGetPerkDtoBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: GetPerkDto;
    errors?: Errors[] | undefined;
    statusCode?: number;
}

export class GetPerkDtoListBaseResponse implements IGetPerkDtoListBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: GetPerkDto[] | undefined;
    errors?: Errors[] | undefined;
    statusCode?: number;

    constructor(data?: IGetPerkDtoListBaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.version = _data["version"];
            this.message = _data["message"];
            if (Array.isArray(_data["responseData"])) {
                this.responseData = [] as any;
                for (let item of _data["responseData"])
                    this.responseData!.push(GetPerkDto.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Errors.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): GetPerkDtoListBaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetPerkDtoListBaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["version"] = this.version;
        data["message"] = this.message;
        if (Array.isArray(this.responseData)) {
            data["responseData"] = [];
            for (let item of this.responseData)
                data["responseData"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface IGetPerkDtoListBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: GetPerkDto[] | undefined;
    errors?: Errors[] | undefined;
    statusCode?: number;
}

export class GetPerkLicenseDto implements IGetPerkLicenseDto {
    id?: number;
    perkName?: string | undefined;
    licenseName?: string | undefined;

    constructor(data?: IGetPerkLicenseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.perkName = _data["perkName"];
            this.licenseName = _data["licenseName"];
        }
    }

    static fromJS(data: any): GetPerkLicenseDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetPerkLicenseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["perkName"] = this.perkName;
        data["licenseName"] = this.licenseName;
        return data;
    }
}

export interface IGetPerkLicenseDto {
    id?: number;
    perkName?: string | undefined;
    licenseName?: string | undefined;
}

export class GetPriceCategory implements IGetPriceCategory {
    id?: number;
    name?: string | undefined;
    nameAr?: string | undefined;
    description?: string | undefined;
    descriptionAr?: string | undefined;
    isPublish?: boolean;
    price?: number;
    categoryAdministrativeRegions?: GetCategoryAdministrativeRegionDto[] | undefined;

    constructor(data?: IGetPriceCategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.nameAr = _data["nameAr"];
            this.description = _data["description"];
            this.descriptionAr = _data["descriptionAr"];
            this.isPublish = _data["isPublish"];
            this.price = _data["price"];
            if (Array.isArray(_data["categoryAdministrativeRegions"])) {
                this.categoryAdministrativeRegions = [] as any;
                for (let item of _data["categoryAdministrativeRegions"])
                    this.categoryAdministrativeRegions!.push(GetCategoryAdministrativeRegionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetPriceCategory {
        data = typeof data === 'object' ? data : {};
        let result = new GetPriceCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["nameAr"] = this.nameAr;
        data["description"] = this.description;
        data["descriptionAr"] = this.descriptionAr;
        data["isPublish"] = this.isPublish;
        data["price"] = this.price;
        if (Array.isArray(this.categoryAdministrativeRegions)) {
            data["categoryAdministrativeRegions"] = [];
            for (let item of this.categoryAdministrativeRegions)
                data["categoryAdministrativeRegions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetPriceCategory {
    id?: number;
    name?: string | undefined;
    nameAr?: string | undefined;
    description?: string | undefined;
    descriptionAr?: string | undefined;
    isPublish?: boolean;
    price?: number;
    categoryAdministrativeRegions?: GetCategoryAdministrativeRegionDto[] | undefined;
}

export class GetPriceCategoryBaseResponse implements IGetPriceCategoryBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: GetPriceCategory;
    errors?: Errors[] | undefined;
    statusCode?: number;

    constructor(data?: IGetPriceCategoryBaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.version = _data["version"];
            this.message = _data["message"];
            this.responseData = _data["responseData"] ? GetPriceCategory.fromJS(_data["responseData"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Errors.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): GetPriceCategoryBaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetPriceCategoryBaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["version"] = this.version;
        data["message"] = this.message;
        data["responseData"] = this.responseData ? this.responseData.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface IGetPriceCategoryBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: GetPriceCategory;
    errors?: Errors[] | undefined;
    statusCode?: number;
}

export class GetPriceCategoryListBaseResponse implements IGetPriceCategoryListBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: GetPriceCategory[] | undefined;
    errors?: Errors[] | undefined;
    statusCode?: number;

    constructor(data?: IGetPriceCategoryListBaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.version = _data["version"];
            this.message = _data["message"];
            if (Array.isArray(_data["responseData"])) {
                this.responseData = [] as any;
                for (let item of _data["responseData"])
                    this.responseData!.push(GetPriceCategory.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Errors.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): GetPriceCategoryListBaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetPriceCategoryListBaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["version"] = this.version;
        data["message"] = this.message;
        if (Array.isArray(this.responseData)) {
            data["responseData"] = [];
            for (let item of this.responseData)
                data["responseData"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface IGetPriceCategoryListBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: GetPriceCategory[] | undefined;
    errors?: Errors[] | undefined;
    statusCode?: number;
}

export class StringBaseResponse implements IStringBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: string | undefined;
    errors?: Errors[] | undefined;
    statusCode?: number;

    constructor(data?: IStringBaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.version = _data["version"];
            this.message = _data["message"];
            this.responseData = _data["responseData"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Errors.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): StringBaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new StringBaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["version"] = this.version;
        data["message"] = this.message;
        data["responseData"] = this.responseData;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface IStringBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: string | undefined;
    errors?: Errors[] | undefined;
    statusCode?: number;
}

export class SupportingServiceProviderDto implements ISupportingServiceProviderDto {
    id?: number;
    name?: string | undefined;
    taxNumber?: string | undefined;
    specializationName?: string | undefined;
    nationalityName?: string | undefined;
    address?: string | undefined;
    websiteURL?: string | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    isJadah30Restricted?: boolean;
    isActive?: boolean;

    constructor(data?: ISupportingServiceProviderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.taxNumber = _data["taxNumber"];
            this.specializationName = _data["specializationName"];
            this.nationalityName = _data["nationalityName"];
            this.address = _data["address"];
            this.websiteURL = _data["websiteURL"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.isJadah30Restricted = _data["isJadah30Restricted"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): SupportingServiceProviderDto {
        data = typeof data === 'object' ? data : {};
        let result = new SupportingServiceProviderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["taxNumber"] = this.taxNumber;
        data["specializationName"] = this.specializationName;
        data["nationalityName"] = this.nationalityName;
        data["address"] = this.address;
        data["websiteURL"] = this.websiteURL;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["isJadah30Restricted"] = this.isJadah30Restricted;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface ISupportingServiceProviderDto {
    id?: number;
    name?: string | undefined;
    taxNumber?: string | undefined;
    specializationName?: string | undefined;
    nationalityName?: string | undefined;
    address?: string | undefined;
    websiteURL?: string | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    isJadah30Restricted?: boolean;
    isActive?: boolean;
}

export class SupportingServiceProviderDtoBaseResponse implements ISupportingServiceProviderDtoBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: SupportingServiceProviderDto;
    errors?: Errors[] | undefined;
    statusCode?: number;

    constructor(data?: ISupportingServiceProviderDtoBaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.version = _data["version"];
            this.message = _data["message"];
            this.responseData = _data["responseData"] ? SupportingServiceProviderDto.fromJS(_data["responseData"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Errors.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): SupportingServiceProviderDtoBaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SupportingServiceProviderDtoBaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["version"] = this.version;
        data["message"] = this.message;
        data["responseData"] = this.responseData ? this.responseData.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface ISupportingServiceProviderDtoBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: SupportingServiceProviderDto;
    errors?: Errors[] | undefined;
    statusCode?: number;
}

export class SupportingServiceProviderDtoListBaseResponse implements ISupportingServiceProviderDtoListBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: SupportingServiceProviderDto[] | undefined;
    errors?: Errors[] | undefined;
    statusCode?: number;

    constructor(data?: ISupportingServiceProviderDtoListBaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.version = _data["version"];
            this.message = _data["message"];
            if (Array.isArray(_data["responseData"])) {
                this.responseData = [] as any;
                for (let item of _data["responseData"])
                    this.responseData!.push(SupportingServiceProviderDto.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Errors.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): SupportingServiceProviderDtoListBaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SupportingServiceProviderDtoListBaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["version"] = this.version;
        data["message"] = this.message;
        if (Array.isArray(this.responseData)) {
            data["responseData"] = [];
            for (let item of this.responseData)
                data["responseData"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface ISupportingServiceProviderDtoListBaseResponse {
    isSuccess?: boolean;
    version?: number;
    message?: string | undefined;
    responseData?: SupportingServiceProviderDto[] | undefined;
    errors?: Errors[] | undefined;
    statusCode?: number;
}

export class WeatherForecast implements IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    readonly temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            (<any>this).temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? formatDate(this.date) : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}